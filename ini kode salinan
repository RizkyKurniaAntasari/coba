// <---------------------------------- [ H A M M E R ] ---------------------------------->
// <---------------------------------- [ B A K E R Y ] ---------------------------------->
#include <iostream>
#include <iomanip>
#include <deque>
#include <string>
#include <fstream>
#include <vector>
#include <unistd.h>
using namespace std;

// <---------------------------------[ U S E R  N E E D S]--------------------------------->

template <class T>
struct COSUMER
{
    T username;
    COSUMER() {}
    COSUMER(T a) : username(a) {}
};

struct User
{
    string *name;
    string *pass;

    User()
    {
        name = new string();
        pass = new string();
    }

    ~User()
    {
        delete name;
        delete pass;
    }
};

class Bakery
{
private:
    // <---------------------------------- [ V A R I A B L E] ---------------------------------->

    User user;
    deque<string> j_kue_list; // Menyimpan jenis kue
    deque<string> u_kue_list; // Menyimpan ukuran kue
    deque<double> h_kue_list; // Menyimpan harga kue

    vector<string> kustom_tulisan;
    int IKT = 0; // index kostum tulisan

    bool masuk = false;
    bool active = true;
    bool done = false;

    double total = 0;

    char confirm;
    char UCAPAN[31] = "Terimakasih Telah Berbelanja,\0";

public:
    // <---------------------------------- [F U N C T I O N ] ---------------------------------->

    Bakery() {}

    Bakery(const User &u)
    {
        user = u;
    }

    // <---------------------------------[ R E G I S T ]--------------------------------->

    void regist()
    {
        cout << "==========================\n";
        cout << "|        Register        |\n";
        cout << "==========================\n";
        cout << "Username: ";
        cin >> *user.name;
        cout << "Password: ";
        cin >> *user.pass;
    }

    // <---------------------------------[ L O G I N ]--------------------------------->

    void login()
    {
        string a, b;
        cout << "==========================\n";
        cout << "|          Login         |\n";
        cout << "==========================\n";
        cout << "Username: ";
        cin >> a;
        cout << "Password: ";
        cin >> b;

        if (a == *user.name && b == *user.pass)
        {
            cout << "Berhasil!\n";
            sleep(1);
            masuk = true;
        }
        else
        {
            cout << "Username atau Password salah! Silahkan coba lagi\n";
            sleep(2);
        }
    }

    // <---------------------------------- [ R E C E I P T  H E A D E R ] ---------------------------------->

    void printReceiptHeader(ofstream &file)
    {
        file << "===================================================================================" << endl;
        file << "                           Hammer Bakery               " << endl;
        file << "                      Jl. Pahlawan No. 123, Lampung    " << endl;
        file << "                       Tel: (4916) 718-1521            " << endl;
        file << "===================================================================================" << endl;
    }

    // <---------------------------------- [ R E C E I P T  M A I N ] ---------------------------------->

    void printItemsSorted(ofstream &file)
    {
        mergeSort(h_kue_list, 0, h_kue_list.size() - 1);

        for (size_t i = 0; i < j_kue_list.size(); ++i)
        {
            file << left << setw(15) << "Nama Barang" << ": " << j_kue_list[i] << endl;
            file << left << setw(15) << "Ukuran" << ": " << u_kue_list[i] << endl;
            file << left << setw(15) << "Tulisan" << ": " << kustom_tulisan[i] << endl;
            file << left << setw(15) << "Qty" << ": " << 1 << endl;
            file << left << setw(15) << "Harga" << ": Rp. " << fixed << setprecision(2) << h_kue_list[i] << endl;
            double subtotal = h_kue_list[i];
            file << left << setw(15) << "Subtotal" << ": Rp. " << fixed << setprecision(2) << subtotal << endl;
            file << "-----------------------------------------------------------------------------------" << endl;
            total += subtotal;
        }
    }
    // <---------------------------------- [ R E C E I P T  F O O T E R ] ---------------------------------->

    void printReceiptFooter(ofstream &file, double total)
    {
        string temp;
        COSUMER<string> costumer;
        costumer.username = *user.name;
        
        file << "===================================================================================" << endl;
        file << fixed << setprecision(2);
        file << "Total                : " << "Rp. " << total << endl;
        file << "===================================================================================" << endl;
        for (auto &i : UCAPAN)
        {
            if (i != '\0')
                temp += i;
        }
        file << "          " << temp << ' ' << costumer.username << '!' << endl;
    }

    // <---------------------------------[ S O R T E D  P R I N T ]--------------------------------->

    void cetak_struk_sorted()
    {
        ofstream outputFile(*user.name + "_struk_sorted.txt");

        if (outputFile.is_open())
        {
            printReceiptHeader(outputFile);
            printItemsSorted(outputFile);
            printReceiptFooter(outputFile, total);
            outputFile.close();
            cout << "Struk telah berhasil dicetak ke dalam file 'struk_sorted.txt'" << endl;
        }
        else
        {
            cout << "Gagal membuka file untuk penulisan." << endl;
        }
    }

    // <---------------------------------[ P R I N T ]--------------------------------->

    void cetak_pesanan_kue()
    {
        cout << "____________________\n";
        cout << "Jenis  : " << j_kue_list.back();
        cout << "\nUkuran : " << u_kue_list.back();
        cout << "\nTulisan: " << kustom_tulisan[IKT];
        cout << "\nHarga  : " << h_kue_list.back();
        cout << "\n____________________";

        cout << "\n\nKonfirmasi Pesanan Anda (y/n) : ";
        cin >> confirm;

        if (confirm == 'y')
        {
            masuk = false;
            done = true;
            IKT++;
        }
        else if (confirm == 'n')
        {
            u_kue_list.pop_back();
            j_kue_list.pop_back();
            h_kue_list.pop_back();
            kustom_tulisan.erase(kustom_tulisan.begin() + kustom_tulisan.size() - 1);
        }
    }

    // <---------------------------------[ C O S T U M E  S I Z E ]--------------------------------->

    void costume_ukuran()
    {
        char ukuran;

        if (j_kue_list.back() != "Brownies Bites")
        {
            cout << "Ukuran apa ?\n";
            cout << "1. Whole\n";
            cout << "2. Slice\n";
            cout << "Pilihan : ";
        }
        else
        {
            cout << "Berapa PCS ?\n";
            cout << "1. 16 PCS\n";
            cout << "2. 8 PCS\n";
            cout << "Pilihan : ";
        }

        cin >> ukuran;

        string u_kue_temp;
        double h_kue_temp;

        if (ukuran == '1' && j_kue_list.back() == "Burnt ChesseCake")
        {
            cout << "Anda memilih Burnt CheeseCake dengan ukuran Whole\n";
            u_kue_temp = "Whole";
            h_kue_temp = 65000;
        }
        else if (ukuran == '2' && j_kue_list.back() == "Burnt ChesseCake")
        {
            cout << "Anda memilih Burnt CheeseCake dengan ukuran Slice\n";
            u_kue_temp = "Slice";
            h_kue_temp = 20000;
        }
        else if (ukuran == '1' && j_kue_list.back() == "Kue Lotus ChesseCake")
        {
            cout << "Anda memilih Lotus CheeseCake dengan ukuran Whole\n";
            u_kue_temp = "Whole";
            h_kue_temp = 55000;
        }
        else if (ukuran == '2' && j_kue_list.back() == "Kue Lotus ChesseCake")
        {
            cout << "Anda memilih Lotus CheeseCake dengan ukuran Slice\n";
            u_kue_temp = "Slice";
            h_kue_temp = 16000;
        }
        else if (ukuran == '1' && j_kue_list.back() == "Brownies Bites")
        {
            cout << "Anda memilih Brownies Bites dengan ukuran 16pcs\n";
            u_kue_temp = "16 pcs";
            h_kue_temp = 55000;
        }
        else if (ukuran == '2' && j_kue_list.back() == "Brownies Bites")
        {
            cout << "Anda memilih Brownies Bites dengan ukuran 8pcs\n";
            u_kue_temp = "8 pcs";
            h_kue_temp = 35000;
        }
        else if (ukuran == '1' && j_kue_list.back() == "Fudgy Brownies")
        {
            u_kue_temp = "Whole";
            h_kue_temp = 60000;
        }
        else if (ukuran == '2' && j_kue_list.back() == "Fudgy Brownies")
        {
            cout << "Hanya terdapat Whole!\n";
            u_kue_temp = "Whole";
            h_kue_temp = 60000;
        }
        else
        {
            cout << "Ukuran tidak valid!\n";
            return;
        }

        u_kue_list.push_back(u_kue_temp); // Tambahkan ukuran kue ke deque
        h_kue_list.push_back(h_kue_temp); // Tambahkan harga kue ke deque
    }

    // <---------------------------------[ M A S S A G E S ]--------------------------------->

    void custome_tulisan()
    {
        string temp = "-";
        cout << "Masukkan tulisan kustom : ";
        cin.ignore();
        getline(cin, temp);
        kustom_tulisan.push_back(temp);
    }

    void costume_list()
    {
        cout << "\n1. Ukuran\n";
        cout << "2. Tulisan\n";
        cout << "3. Pesan\n";
    }

    // <---------------------------------[ C O S T U M E  C A K E ]--------------------------------->

    void costume_kue()
    {
        bool masih_milih = true;
        while (masih_milih)
        {
            char kueCostume;
            costume_list();

            cout << "Pilih (1/2/3) : ";
            cin >> kueCostume;
            switch (kueCostume)
            {
            case '1':
                costume_ukuran();
                break;

            case '2':
                custome_tulisan();
                break;

            case '3':
                cetak_pesanan_kue();
                masih_milih = false;
                active = false;
                break;
            default:
                cout << "Opsi Invalid! Coba lagi!\n";
                sleep(1);
                break;
            }
        }
    }

    // <---------------------------------[ R U N  C O D E ]--------------------------------->

    void pesanan()
    {
        char kueChoice;
        kue();
        cout << "Pilih kue (1/2/3/4): ";
        cin >> kueChoice;

        switch (kueChoice)
        {
        case '1':
            cout << "Anda memilih Kue Burnt ChesseCake.\n";
            j_kue_list.push_back("Burnt ChesseCake");
            break;
        case '2':
            cout << "Anda memilih Kue Lotus ChesseCake.\n";
            j_kue_list.push_back("Kue Lotus ChesseCake");
            break;
        case '3':
            cout << "Anda memilih Brownies Bites.\n";
            j_kue_list.push_back("Brownies Bites");
            break;
        case '4':
            cout << "Anda memilih Fudgy Brownies.\n";
            j_kue_list.push_back("Fudgy Brownies");
            break;
        default:
            cout << "Pilihan tidak valid!\n";
            sleep(1);
            system("clear");
            kueChoice = '\0';
            pesanan();
            break;
        }
        costume_kue();
    }

    // <---------------------------------[ C A K E  M E N U ]--------------------------------->

    void kue()
    {
        cout << "+------------------------------------------------------------+" << endl;
        cout << "| _  _                            ___       _                |" << endl;
        cout << "|| || |__ _ _ __  _ __  ___ _ _  | _ ) __ _| |_____ _ _ _  _ |" << endl;
        cout << "|| __ / _` | '  \\| '  \\/ -_) '_| | _ \\/ _` | / / -_) '_| || ||" << endl;
        cout << "||_||_\\__,_|_|_|_|_|_|_\\___|_|   |___/\\__,_|_\\_\\___|_|  \\_, ||" << endl;
        cout << "|                  |  \\/  |___ _ _ _  _                 |__/ |" << endl;
        cout << "|                  | |\\/| / -_) ' \\ || |                     |" << endl;
        cout << "|                  |_|  |_\\___|_||_\\_,_|                     |" << endl;
        cout << "+------------------------------------------------------------+" << endl;
        cout << "|                                                            |" << endl;
        cout << "|    ChesseCake                                              |" << endl;
        cout << "|                                                            |" << endl;
        cout << "|    1. Burnt ChesseCake   (slice / whole)      20k/65k      |" << endl;
        cout << "|    2. Lotus ChesseCake   (Slice / Whole)      16k/55k      |" << endl;
        cout << "|                                                            |" << endl;
        cout << "|    Brownies                                                |" << endl;
        cout << "|                                                            |" << endl;
        cout << "|    3. Brownies Bites  (8pcs / 16pcs)           35k/55k     |" << endl;
        cout << "|    4. Fudgy Brownies  (whole)                  60k         |" << endl;
        cout << "|                                                            |" << endl;
        cout << "|                                        (                   |" << endl;
        cout << "|                                         )                  |" << endl;
        cout << "|                                     _..--.._               |" << endl;
        cout << "|                                  -=' / | \\ `=-.            |" << endl;
        cout << "|                                 :--.._____..--;            |" << endl;
        cout << "|                                  \\.,_______,./             |" << endl;
        cout << "+------------------------------------------------------------+" << endl;
    }

    // <---------------------------------[ G R E A T I N G ]--------------------------------->

    void greetingHammer()
    {
        cout << "__        _______ _     ____ ___  __  __ _____" << endl;
        cout << "\\ \\      / / ____| |   / ___/ _ \\|  \\/  | ____|" << endl;
        cout << " \\ \\ /\\ / /|  _| | |  | |  | | | | |\\/| |  _|" << endl;
        cout << "  \\ V  V / | |___| |__| |__| |_| | |  | | |___" << endl;
        cout << "   \\_/\\_/  |_____|_____\\____\\___/|_|  |_|_____|" << endl;
        cout << "              TO HAMMER BAKERY\n";
        cout << "Silahkan lihat-lihat!\n";
        kue();
    }

    void greeting()
    {
        cout << "__        _______ _     ____ ___  __  __ _____" << endl;
        cout << "\\ \\      / / ____| |   / ___/ _ \\|  \\/  | ____|" << endl;
        cout << " \\ \\ /\\ / /|  _| | |  | |  | | | | |\\/| |  _|" << endl;
        cout << "  \\ V  V / | |___| |__| |__| |_| | |  | | |___" << endl;
        cout << "   \\_/\\_/  |_____|_____\\____\\___/|_|  |_|_____|" << endl;
        cout << "1. Login\n";
        cout << "2. Daftar\n";
        cout << "3. Exit\n";
        cout << "Pilihan: ";
    }

    // <---------------------------------[ R U N  C O D E ]--------------------------------->

    void run()
    {
        char menu;

        while (active)
        {
            greeting();
            cin >> menu;

            switch (menu)
            {
            case '1':
                system("clear");
                login();
                sleep(1);
                system("clear");
                break;
            case '2':
                system("clear");
                regist();
                cout << "Akun berhasil dibuat!" << endl;
                sleep(1);
                system("clear");
                break;
            case '3':
                system("clear");
                sleep(1);
                cout << " _____ _   _    _    _   _ _  __ __   _____  _   _ " << endl;
                cout << "|_   _| | | |  / \\  | \\ | | |/ / \\ \\ / / _ \\| | | |" << endl;
                cout << "  | | | |_| | / _ \\ |  \\| | ' /   \\ V / | | | | | |" << endl;
                cout << "  | | |  _  |/ ___ \\| |\\  | . \\    | || |_| | |_| |" << endl;
                cout << "  |_| |_| |_/_/   \\_\\_| \\_|_|\\_\\   |_| \\___/ \\___/ " << endl;
                active = false;
                break;
            default:
                cout << "Opsi Invalid! Coba Lagi!\n";
                sleep(1);
                system("clear");
                break;
            }

            while (masuk)
            {
                char pesan;
                greetingHammer();
                cout << "Apakah anda ingin memesan? (y/n): ";
                cin >> pesan;

                switch (pesan)
                {
                case 'y':
                    masuk = false;
                    done = true;
                    break;
                case 'n':
                    masuk = false;
                    break;
                default:
                    cout << "Opsi Invalid! Coba lagi!\n";
                    sleep(1);
                    system("clear");
                    break;
                }
            }

            if (done)
            {
                int jumlah_pesanan;
                cout << "Berapa banyak kue yang ingin dipesan? ";
                cin >> jumlah_pesanan;

                for (int i = 0; i < jumlah_pesanan; ++i)
                {
                    cout << "\nPesanan ke-" << (i + 1) << ":\n";
                    pesanan();
                }

                cetak_struk_sorted();
                active = masuk = 0;
                sleep(2);
                system("clear");

                cout << " _____ _   _    _    _   _ _  __ __   _____  _   _ " << endl;
                cout << "|_   _| | | |  / \\  | \\ | | |/ / \\ \\ / / _ \\| | | |" << endl;
                cout << "  | | | |_| | / _ \\ |  \\| | ' /   \\ V / | | | | | |" << endl;
                cout << "  | | |  _  |/ ___ \\| |\\  | . \\    | || |_| | |_| |" << endl;
                cout << "  |_| |_| |_/_/   \\_\\_| \\_|_|\\_\\   |_| \\___/ \\___/ " << endl;
            }
        }
    }

    // <---------------------------------[ M E R G E ]--------------------------------->

    void merge(deque<double> &arr, int l, int m, int r)
    {
        int i, j, k;
        int n1 = m - l + 1;
        int n2 = r - m;

        double L[n1], R[n2];

        for (i = 0; i < n1; i++)
            L[i] = arr[l + i];
        for (j = 0; j < n2; j++)
            R[j] = arr[m + 1 + j];

        i = 0;
        j = 0;
        k = l;
        while (i < n1 && j < n2)
        {
            if (L[i] >= R[j])
            {
                arr[k] = L[i];
                i++;
            }
            else
            {
                arr[k] = R[j];
                j++;
            }
            k++;
        }

        while (i < n1)
        {
            arr[k] = L[i];
            i++;
            k++;
        }

        while (j < n2)
        {
            arr[k] = R[j];
            j++;
            k++;
        }
    }

    // <---------------------------------[ S O R T I N G ]--------------------------------->

    void mergeSort(deque<double> &arr, int l, int r)
    {
        if (l >= r)
            return;

        int m = l + (r - l) / 2;
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);
        merge(arr, l, m, r);
    }
};

// <---------------------------------[ I N T  M A I N ]--------------------------------->

int main()
{
    Bakery bakery;
    bakery.run();
    return 0;
}
